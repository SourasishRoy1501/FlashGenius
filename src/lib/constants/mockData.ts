import { Deck, Flashcard, ReviewSession, User } from '../types';
import { v4 as uuidv4 } from 'uuid';

// Create dates for mock data
const today = new Date();
const yesterday = new Date(today);
yesterday.setDate(yesterday.getDate() - 1);
const lastWeek = new Date(today);
lastWeek.setDate(lastWeek.getDate() - 7);
const nextWeek = new Date(today);
nextWeek.setDate(nextWeek.getDate() + 7);

// Mock decks
export const MOCK_DECKS: Deck[] = [
  {
    id: 'deck-1',
    name: 'Spanish Vocabulary',
    description: 'Basic Spanish vocabulary for beginners',
    category: 'Languages',
    cardsCount: 20,
    dueCardsCount: 5,
    isPublic: true,
    tags: ['language', 'spanish', 'beginner'],
    rating: 4.5,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'deck-2',
    name: 'JavaScript Concepts',
    description: 'Core JavaScript concepts every developer should know',
    category: 'Programming',
    cardsCount: 15,
    dueCardsCount: 8,
    isPublic: true,
    tags: ['programming', 'javascript', 'web development'],
    rating: 4.8,
    createdAt: lastWeek,
    updatedAt: today,
  },
  {
    id: 'deck-3',
    name: 'World Capitals',
    description: 'Learn capital cities of countries around the world',
    category: 'Geography',
    cardsCount: 30,
    dueCardsCount: 12,
    isPublic: false,
    tags: ['geography', 'capitals', 'countries'],
    rating: 4.2,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'deck-4',
    name: 'React Hooks',
    description: 'Understanding React Hooks and their use cases',
    category: 'Programming',
    cardsCount: 10,
    dueCardsCount: 3,
    isPublic: true,
    tags: ['programming', 'react', 'hooks', 'frontend'],
    rating: 4.7,
    createdAt: lastWeek,
    updatedAt: today,
  },
];

// Mock flashcards
export const MOCK_FLASHCARDS: Flashcard[] = [
  // Spanish Vocabulary Deck
  {
    id: 'card-1',
    question: '¿Cómo estás?',
    answer: 'How are you?',
    deckId: 'deck-1',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: nextWeek,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-2',
    question: 'Buenos días',
    answer: 'Good morning',
    deckId: 'deck-1',
    difficulty: 'medium',
    repetitions: 2,
    interval: 3,
    efactor: 2.1,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-3',
    question: 'Gracias',
    answer: 'Thank you',
    deckId: 'deck-1',
    difficulty: 'easy',
    repetitions: 4,
    interval: 10,
    efactor: 2.7,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 10)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  
  // JavaScript Concepts Deck
  {
    id: 'card-4',
    question: 'What is a closure in JavaScript?',
    answer: 'A closure is a function that has access to its own scope, the scope of the outer function, and the global scope.',
    deckId: 'deck-2',
    difficulty: 'hard',
    repetitions: 1,
    interval: 1,
    efactor: 1.8,
    lastReviewed: yesterday,
    nextReviewDate: today,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-5',
    question: 'Explain the difference between let, const, and var.',
    answer: 'var is function-scoped and can be redeclared. let is block-scoped and can be reassigned but not redeclared. const is block-scoped and cannot be reassigned or redeclared.',
    deckId: 'deck-2',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  
  // World Capitals Deck
  {
    id: 'card-6',
    question: 'What is the capital of France?',
    answer: 'Paris',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 5,
    interval: 15,
    efactor: 2.8,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 15)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-7',
    question: 'What is the capital of Japan?',
    answer: 'Tokyo',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 4,
    interval: 12,
    efactor: 2.6,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 12)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  
  // React Hooks Deck
  {
    id: 'card-8',
    question: 'What is useState hook used for?',
    answer: 'useState is a hook that lets you add React state to function components. It returns a stateful value and a function to update it.',
    deckId: 'deck-4',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-9',
    question: 'Explain useEffect hook.',
    answer: 'useEffect lets you perform side effects in function components. It serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount in React classes.',
    deckId: 'deck-4',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.9,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-10',
    question: 'What is useContext hook?',
    answer: 'useContext is a hook that lets you subscribe to React context without introducing nesting. It accepts a context object and returns the current context value for that context.',
    deckId: 'deck-4',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-11',
    question: 'How does useReducer hook work?',
    answer: 'useReducer accepts a reducer function and initial state, and returns the current state paired with a dispatch method. It\'s usually preferable to useState when you have complex state logic.',
    deckId: 'deck-4',
    difficulty: 'hard',
    repetitions: 1,
    interval: 3,
    efactor: 2.0,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-12',
    question: 'What is useRef used for?',
    answer: 'useRef returns a mutable ref object whose .current property is initialized to the passed argument. The returned object will persist for the full lifetime of the component and can be used to access DOM elements or store mutable values.',
    deckId: 'deck-4',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-13',
    question: 'Explain useMemo hook.',
    answer: 'useMemo returns a memoized value that only recalculates when one of its dependencies changes. This optimization helps avoid expensive calculations on every render.',
    deckId: 'deck-4',
    difficulty: 'easy',
    repetitions: 3,
    interval: 8,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 8)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-14',
    question: 'How does useCallback differ from useMemo?',
    answer: 'useCallback returns a memoized callback function, while useMemo returns a memoized value. useCallback is used when you want to prevent a function from being recreated on every render, particularly useful when passing callbacks to optimized child components.',
    deckId: 'deck-4',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.8,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-15',
    question: 'What are the Rules of Hooks in React?',
    answer: '1. Only call hooks at the top level, not inside loops, conditions, or nested functions. 2. Only call hooks from React function components or custom hooks, not from regular JavaScript functions.',
    deckId: 'deck-4',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-16',
    question: 'What is a custom hook in React?',
    answer: 'A custom hook is a JavaScript function whose name starts with "use" and that may call other hooks. Custom hooks let you extract component logic into reusable functions and share stateful logic between components.',
    deckId: 'deck-4',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.4,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-17',
    question: 'What is useLayoutEffect and how does it differ from useEffect?',
    answer: 'useLayoutEffect is identical to useEffect, but it fires synchronously after all DOM mutations, before the browser has a chance to paint. Use this to read layout from the DOM and synchronously re-render, but prefer useEffect when possible as useLayoutEffect can impact performance.',
    deckId: 'deck-4',
    difficulty: 'hard',
    repetitions: 1,
    interval: 3,
    efactor: 2.0,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
];

// Mock review sessions
export const MOCK_REVIEW_SESSIONS: ReviewSession[] = [
  {
    id: 'session-1',
    deckId: 'deck-1',
    startTime: new Date(yesterday.setHours(yesterday.getHours() - 1)),
    endTime: yesterday,
    cardsReviewed: 3,
    correctAnswers: 2,
    reviews: [
      {
        id: 'review-1',
        flashcardId: 'card-1',
        sessionId: 'session-1',
        difficulty: 'easy',
        isCorrect: true,
        timeSpent: 5000,
        date: new Date(yesterday.setMinutes(yesterday.getMinutes() - 30))
      },
      {
        id: 'review-2',
        flashcardId: 'card-2',
        sessionId: 'session-1',
        difficulty: 'medium',
        isCorrect: true,
        timeSpent: 8000,
        date: new Date(yesterday.setMinutes(yesterday.getMinutes() - 20))
      },
      {
        id: 'review-3',
        flashcardId: 'card-3',
        sessionId: 'session-1',
        difficulty: 'hard',
        isCorrect: false,
        timeSpent: 12000,
        date: new Date(yesterday.setMinutes(yesterday.getMinutes() - 10))
      }
    ],
  },
  {
    id: 'session-2',
    deckId: 'deck-2',
    startTime: new Date(yesterday.setHours(yesterday.getHours() - 3)),
    endTime: new Date(yesterday.setHours(yesterday.getHours() - 2)),
    cardsReviewed: 2,
    correctAnswers: 1,
    reviews: [
      {
        id: 'review-4',
        flashcardId: 'card-4',
        sessionId: 'session-2',
        difficulty: 'hard',
        isCorrect: false,
        timeSpent: 15000,
        date: new Date(yesterday.setMinutes(yesterday.getMinutes() - 40))
      },
      {
        id: 'review-5',
        flashcardId: 'card-5',
        sessionId: 'session-2',
        difficulty: 'medium',
        isCorrect: true,
        timeSpent: 7000,
        date: new Date(yesterday.setMinutes(yesterday.getMinutes() - 30))
      }
    ],
  },
  {
    id: 'session-3',
    deckId: 'deck-3',
    startTime: new Date(lastWeek.setHours(lastWeek.getHours() - 4)),
    endTime: new Date(lastWeek.setHours(lastWeek.getHours() - 3)),
    cardsReviewed: 2,
    correctAnswers: 2,
    reviews: [
      {
        id: 'review-6',
        flashcardId: 'card-6',
        sessionId: 'session-3',
        difficulty: 'easy',
        isCorrect: true,
        timeSpent: 4000,
        date: new Date(lastWeek.setMinutes(lastWeek.getMinutes() - 50))
      },
      {
        id: 'review-7',
        flashcardId: 'card-7',
        sessionId: 'session-3',
        difficulty: 'easy',
        isCorrect: true,
        timeSpent: 3000,
        date: new Date(lastWeek.setMinutes(lastWeek.getMinutes() - 45))
      }
    ],
  },
];

// Mock user
export const MOCK_USER: User = {
  id: 'user-1',
  name: 'John Doe',
  email: 'john.doe@example.com',
  decks: MOCK_DECKS,
  stats: {
    totalCards: 75,
    totalDecks: 4,
    cardsLearned: 45,
    reviewStreak: 7,
    lastReviewDate: yesterday,
    retentionRate: 85,
  },
};

// Community decks for marketplace
export const COMMUNITY_DECKS: Deck[] = [
  {
    id: 'community-deck-1',
    name: 'Medical Terminology',
    description: 'Essential medical terms for healthcare students',
    category: 'Medicine',
    cardsCount: 100,
    dueCardsCount: 0,
    isPublic: true,
    authorId: 'user-2',
    tags: ['medicine', 'healthcare', 'terminology'],
    rating: 4.9,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'community-deck-2',
    name: 'Data Structures & Algorithms',
    description: 'Core computer science concepts for interviews',
    category: 'Computer Science',
    cardsCount: 75,
    dueCardsCount: 0,
    isPublic: true,
    authorId: 'user-3',
    tags: ['programming', 'algorithms', 'data structures', 'interviews'],
    rating: 4.7,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'community-deck-3',
    name: 'IELTS Vocabulary',
    description: 'Essential vocabulary for IELTS exam preparation',
    category: 'Languages',
    cardsCount: 200,
    dueCardsCount: 0,
    isPublic: true,
    authorId: 'user-4',
    tags: ['english', 'ielts', 'exam', 'vocabulary'],
    rating: 4.8,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
]; 