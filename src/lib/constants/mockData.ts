import { Deck, Flashcard, ReviewSession, User } from '../types';
import { v4 as uuidv4 } from 'uuid';

// Create dates for mock data
const today = new Date();
const yesterday = new Date(today);
yesterday.setDate(yesterday.getDate() - 1);
const lastWeek = new Date(today);
lastWeek.setDate(lastWeek.getDate() - 7);
const nextWeek = new Date(today);
nextWeek.setDate(nextWeek.getDate() + 7);

// Mock decks
export const MOCK_DECKS: Deck[] = [
  {
    id: 'deck-1',
    name: 'Spanish Vocabulary',
    description: 'Basic Spanish vocabulary for beginners',
    category: 'Languages',
    cardsCount: 20,
    dueCardsCount: 5,
    isPublic: true,
    tags: ['language', 'spanish', 'beginner'],
    rating: 4.5,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'deck-2',
    name: 'JavaScript Concepts',
    description: 'Core JavaScript concepts every developer should know',
    category: 'Programming',
    cardsCount: 15,
    dueCardsCount: 8,
    isPublic: true,
    tags: ['programming', 'javascript', 'web development'],
    rating: 4.8,
    createdAt: lastWeek,
    updatedAt: today,
  },
  {
    id: 'deck-3',
    name: 'World Capitals',
    description: 'Learn capital cities of countries around the world',
    category: 'Geography',
    cardsCount: 30,
    dueCardsCount: 12,
    isPublic: false,
    tags: ['geography', 'capitals', 'countries'],
    rating: 4.2,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'deck-4',
    name: 'React Hooks',
    description: 'Understanding React Hooks and their use cases',
    category: 'Programming',
    cardsCount: 10,
    dueCardsCount: 3,
    isPublic: true,
    tags: ['programming', 'react', 'hooks', 'frontend'],
    rating: 4.7,
    createdAt: lastWeek,
    updatedAt: today,
  },
];

// Mock flashcards
export const MOCK_FLASHCARDS: Flashcard[] = [
  // Spanish Vocabulary Deck
  {
    id: 'card-1',
    question: '¿Cómo estás?',
    answer: 'How are you?',
    deckId: 'deck-1',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: nextWeek,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-2',
    question: 'Buenos días',
    answer: 'Good morning',
    deckId: 'deck-1',
    difficulty: 'medium',
    repetitions: 2,
    interval: 3,
    efactor: 2.1,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-3',
    question: 'Gracias',
    answer: 'Thank you',
    deckId: 'deck-1',
    difficulty: 'easy',
    repetitions: 4,
    interval: 10,
    efactor: 2.7,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 10)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-18',
    question: 'Por favor',
    answer: 'Please',
    deckId: 'deck-1',
    difficulty: 'easy',
    repetitions: 3,
    interval: 6,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 6)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-19',
    question: 'Hola',
    answer: 'Hello',
    deckId: 'deck-1',
    difficulty: 'easy',
    repetitions: 4,
    interval: 8,
    efactor: 2.6,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 8)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-20',
    question: 'Adiós',
    answer: 'Goodbye',
    deckId: 'deck-1',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.4,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-21',
    question: '¿Qué tal?',
    answer: 'How are you? / What\'s up?',
    deckId: 'deck-1',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-22',
    question: 'Buenas noches',
    answer: 'Good night',
    deckId: 'deck-1',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-23',
    question: 'Mucho gusto',
    answer: 'Nice to meet you',
    deckId: 'deck-1',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.9,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-24',
    question: '¿Cómo te llamas?',
    answer: 'What is your name?',
    deckId: 'deck-1',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-25',
    question: 'Me llamo...',
    answer: 'My name is...',
    deckId: 'deck-1',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-26',
    question: 'Hasta luego',
    answer: 'See you later',
    deckId: 'deck-1',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-27',
    question: 'Por supuesto',
    answer: 'Of course',
    deckId: 'deck-1',
    difficulty: 'hard',
    repetitions: 1,
    interval: 3,
    efactor: 2.0,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-28',
    question: 'Lo siento',
    answer: 'I\'m sorry',
    deckId: 'deck-1',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-29',
    question: 'De nada',
    answer: 'You\'re welcome',
    deckId: 'deck-1',
    difficulty: 'easy',
    repetitions: 3,
    interval: 6,
    efactor: 2.4,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 6)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-30',
    question: 'Hasta mañana',
    answer: 'See you tomorrow',
    deckId: 'deck-1',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-31',
    question: 'Buenas tardes',
    answer: 'Good afternoon',
    deckId: 'deck-1',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-32',
    question: '¿Qué hora es?',
    answer: 'What time is it?',
    deckId: 'deck-1',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-33',
    question: 'Encantado/a',
    answer: 'Pleased to meet you',
    deckId: 'deck-1',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.9,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-34',
    question: 'Buen provecho',
    answer: 'Enjoy your meal',
    deckId: 'deck-1',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  
  // JavaScript Concepts Deck
  {
    id: 'card-4',
    question: 'What is a closure in JavaScript?',
    answer: 'A closure is a function that has access to its own scope, the scope of the outer function, and the global scope.',
    deckId: 'deck-2',
    difficulty: 'hard',
    repetitions: 1,
    interval: 1,
    efactor: 1.8,
    lastReviewed: yesterday,
    nextReviewDate: today,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-5',
    question: 'Explain the difference between let, const, and var.',
    answer: 'var is function-scoped and can be redeclared. let is block-scoped and can be reassigned but not redeclared. const is block-scoped and cannot be reassigned or redeclared.',
    deckId: 'deck-2',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-35',
    question: 'What is the difference between == and === in JavaScript?',
    answer: '== performs type coercion before comparison, while === compares both value and type without coercion. === is generally preferred for strict equality comparison.',
    deckId: 'deck-2',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-36',
    question: 'What is the event loop in JavaScript?',
    answer: 'The event loop is a mechanism that allows JavaScript to perform non-blocking operations despite being single-threaded. It handles asynchronous callbacks and manages the execution of code in the call stack.',
    deckId: 'deck-2',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.9,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-37',
    question: 'What is prototypal inheritance?',
    answer: 'Prototypal inheritance is a method by which an object can inherit properties and methods from another object through its prototype chain. Objects can share and extend behavior through linked prototype objects.',
    deckId: 'deck-2',
    difficulty: 'hard',
    repetitions: 1,
    interval: 3,
    efactor: 2.0,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-38',
    question: 'What is hoisting in JavaScript?',
    answer: 'Hoisting is JavaScript\'s default behavior of moving declarations to the top of their scope before code execution. Variables declared with var and function declarations are hoisted.',
    deckId: 'deck-2',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-39',
    question: 'What is the difference between map and forEach?',
    answer: 'map creates a new array with the results of calling a function for every array element, while forEach just executes a function for each array element without creating a new array.',
    deckId: 'deck-2',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-40',
    question: 'What is the purpose of the this keyword?',
    answer: 'this refers to the current execution context and its value depends on how and where the function is called, not where it\'s defined. It can refer to different objects based on the context.',
    deckId: 'deck-2',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.8,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-41',
    question: 'What is the difference between null and undefined?',
    answer: 'undefined means a variable has been declared but not assigned a value, while null is an intentional assignment representing "no value" or "empty value".',
    deckId: 'deck-2',
    difficulty: 'easy',
    repetitions: 3,
    interval: 6,
    efactor: 2.4,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 6)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-42',
    question: 'What is a Promise in JavaScript?',
    answer: 'A Promise is an object representing the eventual completion (or failure) of an asynchronous operation. It can be in one of three states: pending, fulfilled, or rejected.',
    deckId: 'deck-2',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-43',
    question: 'What is async/await?',
    answer: 'async/await is a syntax for handling Promises that makes asynchronous code look and behave more like synchronous code. async functions always return a Promise, and await pauses execution until a Promise resolves.',
    deckId: 'deck-2',
    difficulty: 'hard',
    repetitions: 1,
    interval: 3,
    efactor: 2.0,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-44',
    question: 'What is the spread operator?',
    answer: 'The spread operator (...) allows an iterable to be expanded in places where zero or more arguments/elements are expected. It can be used with arrays, objects, and function arguments.',
    deckId: 'deck-2',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-45',
    question: 'What is destructuring in JavaScript?',
    answer: 'Destructuring is a way to extract multiple values from data stored in objects and arrays. It allows you to assign values to variables in a more concise way.',
    deckId: 'deck-2',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-46',
    question: 'What is the difference between call, apply, and bind?',
    answer: 'call and apply both invoke a function immediately with a specified this value, but call takes arguments separately while apply takes them as an array. bind creates a new function with a fixed this value but doesn\'t invoke it.',
    deckId: 'deck-2',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.9,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-47',
    question: 'What is event bubbling?',
    answer: 'Event bubbling is the process where an event triggered on a nested element will "bubble up" through its parent elements in the DOM tree, triggering their event handlers as well.',
    deckId: 'deck-2',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  
  // World Capitals Deck
  {
    id: 'card-6',
    question: 'What is the capital of France?',
    answer: 'Paris',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 5,
    interval: 15,
    efactor: 2.8,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 15)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-7',
    question: 'What is the capital of Japan?',
    answer: 'Tokyo',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 4,
    interval: 12,
    efactor: 2.6,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 12)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-48',
    question: 'What is the capital of Germany?',
    answer: 'Berlin',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-49',
    question: 'What is the capital of Italy?',
    answer: 'Rome',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 3,
    interval: 8,
    efactor: 2.6,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 8)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-50',
    question: 'What is the capital of Spain?',
    answer: 'Madrid',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 4,
    interval: 10,
    efactor: 2.7,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 10)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-51',
    question: 'What is the capital of China?',
    answer: 'Beijing',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-52',
    question: 'What is the capital of India?',
    answer: 'New Delhi',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-53',
    question: 'What is the capital of Brazil?',
    answer: 'Brasília',
    deckId: 'deck-3',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.9,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-54',
    question: 'What is the capital of Russia?',
    answer: 'Moscow',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-55',
    question: 'What is the capital of Australia?',
    answer: 'Canberra',
    deckId: 'deck-3',
    difficulty: 'hard',
    repetitions: 1,
    interval: 3,
    efactor: 2.0,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-56',
    question: 'What is the capital of South Africa?',
    answer: 'Pretoria (executive), Cape Town (legislative), Bloemfontein (judicial)',
    deckId: 'deck-3',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.8,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-57',
    question: 'What is the capital of Mexico?',
    answer: 'Mexico City',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 3,
    interval: 6,
    efactor: 2.4,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 6)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-58',
    question: 'What is the capital of Canada?',
    answer: 'Ottawa',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-59',
    question: 'What is the capital of Argentina?',
    answer: 'Buenos Aires',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-60',
    question: 'What is the capital of Egypt?',
    answer: 'Cairo',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-61',
    question: 'What is the capital of South Korea?',
    answer: 'Seoul',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-62',
    question: 'What is the capital of Turkey?',
    answer: 'Ankara',
    deckId: 'deck-3',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.9,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-63',
    question: 'What is the capital of Sweden?',
    answer: 'Stockholm',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-64',
    question: 'What is the capital of Norway?',
    answer: 'Oslo',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-65',
    question: 'What is the capital of Greece?',
    answer: 'Athens',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-66',
    question: 'What is the capital of Vietnam?',
    answer: 'Hanoi',
    deckId: 'deck-3',
    difficulty: 'hard',
    repetitions: 1,
    interval: 3,
    efactor: 2.0,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-67',
    question: 'What is the capital of Portugal?',
    answer: 'Lisbon',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-68',
    question: 'What is the capital of Austria?',
    answer: 'Vienna',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-69',
    question: 'What is the capital of Poland?',
    answer: 'Warsaw',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-70',
    question: 'What is the capital of Thailand?',
    answer: 'Bangkok',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 3,
    interval: 6,
    efactor: 2.4,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 6)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-71',
    question: 'What is the capital of Denmark?',
    answer: 'Copenhagen',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-72',
    question: 'What is the capital of Ireland?',
    answer: 'Dublin',
    deckId: 'deck-3',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-73',
    question: 'What is the capital of Switzerland?',
    answer: 'Bern',
    deckId: 'deck-3',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.9,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-74',
    question: 'What is the capital of Finland?',
    answer: 'Helsinki',
    deckId: 'deck-3',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-75',
    question: 'What is the capital of New Zealand?',
    answer: 'Wellington',
    deckId: 'deck-3',
    difficulty: 'hard',
    repetitions: 1,
    interval: 3,
    efactor: 2.0,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  
  // React Hooks Deck
  {
    id: 'card-8',
    question: 'What is useState hook used for?',
    answer: 'useState is a hook that lets you add React state to function components. It returns a stateful value and a function to update it.',
    deckId: 'deck-4',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-9',
    question: 'Explain useEffect hook.',
    answer: 'useEffect lets you perform side effects in function components. It serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount in React classes.',
    deckId: 'deck-4',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.9,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-10',
    question: 'What is useContext hook?',
    answer: 'useContext is a hook that lets you subscribe to React context without introducing nesting. It accepts a context object and returns the current context value for that context.',
    deckId: 'deck-4',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-11',
    question: 'How does useReducer hook work?',
    answer: 'useReducer accepts a reducer function and initial state, and returns the current state paired with a dispatch method. It\'s usually preferable to useState when you have complex state logic.',
    deckId: 'deck-4',
    difficulty: 'hard',
    repetitions: 1,
    interval: 3,
    efactor: 2.0,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-12',
    question: 'What is useRef used for?',
    answer: 'useRef returns a mutable ref object whose .current property is initialized to the passed argument. The returned object will persist for the full lifetime of the component and can be used to access DOM elements or store mutable values.',
    deckId: 'deck-4',
    difficulty: 'medium',
    repetitions: 2,
    interval: 5,
    efactor: 2.3,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 5)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-13',
    question: 'Explain useMemo hook.',
    answer: 'useMemo returns a memoized value that only recalculates when one of its dependencies changes. This optimization helps avoid expensive calculations on every render.',
    deckId: 'deck-4',
    difficulty: 'easy',
    repetitions: 3,
    interval: 8,
    efactor: 2.5,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 8)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-14',
    question: 'How does useCallback differ from useMemo?',
    answer: 'useCallback returns a memoized callback function, while useMemo returns a memoized value. useCallback is used when you want to prevent a function from being recreated on every render, particularly useful when passing callbacks to optimized child components.',
    deckId: 'deck-4',
    difficulty: 'hard',
    repetitions: 1,
    interval: 2,
    efactor: 1.8,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 2)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-15',
    question: 'What are the Rules of Hooks in React?',
    answer: '1. Only call hooks at the top level, not inside loops, conditions, or nested functions. 2. Only call hooks from React function components or custom hooks, not from regular JavaScript functions.',
    deckId: 'deck-4',
    difficulty: 'medium',
    repetitions: 2,
    interval: 4,
    efactor: 2.2,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 4)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-16',
    question: 'What is a custom hook in React?',
    answer: 'A custom hook is a JavaScript function whose name starts with "use" and that may call other hooks. Custom hooks let you extract component logic into reusable functions and share stateful logic between components.',
    deckId: 'deck-4',
    difficulty: 'easy',
    repetitions: 3,
    interval: 7,
    efactor: 2.4,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 7)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'card-17',
    question: 'What is useLayoutEffect and how does it differ from useEffect?',
    answer: 'useLayoutEffect is identical to useEffect, but it fires synchronously after all DOM mutations, before the browser has a chance to paint. Use this to read layout from the DOM and synchronously re-render, but prefer useEffect when possible as useLayoutEffect can impact performance.',
    deckId: 'deck-4',
    difficulty: 'hard',
    repetitions: 1,
    interval: 3,
    efactor: 2.0,
    lastReviewed: yesterday,
    nextReviewDate: new Date(today.setDate(today.getDate() + 3)),
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
];

// Mock review sessions
export const MOCK_REVIEW_SESSIONS: ReviewSession[] = [
  {
    id: 'session-1',
    deckId: 'deck-1',
    startTime: new Date(yesterday.setHours(yesterday.getHours() - 1)),
    endTime: yesterday,
    cardsReviewed: 3,
    correctAnswers: 2,
    reviews: [
      {
        id: 'review-1',
        flashcardId: 'card-1',
        sessionId: 'session-1',
        difficulty: 'easy',
        isCorrect: true,
        timeSpent: 5000,
        date: new Date(yesterday.setMinutes(yesterday.getMinutes() - 30))
      },
      {
        id: 'review-2',
        flashcardId: 'card-2',
        sessionId: 'session-1',
        difficulty: 'medium',
        isCorrect: true,
        timeSpent: 8000,
        date: new Date(yesterday.setMinutes(yesterday.getMinutes() - 20))
      },
      {
        id: 'review-3',
        flashcardId: 'card-3',
        sessionId: 'session-1',
        difficulty: 'hard',
        isCorrect: false,
        timeSpent: 12000,
        date: new Date(yesterday.setMinutes(yesterday.getMinutes() - 10))
      }
    ],
  },
  {
    id: 'session-2',
    deckId: 'deck-2',
    startTime: new Date(yesterday.setHours(yesterday.getHours() - 3)),
    endTime: new Date(yesterday.setHours(yesterday.getHours() - 2)),
    cardsReviewed: 2,
    correctAnswers: 1,
    reviews: [
      {
        id: 'review-4',
        flashcardId: 'card-4',
        sessionId: 'session-2',
        difficulty: 'hard',
        isCorrect: false,
        timeSpent: 15000,
        date: new Date(yesterday.setMinutes(yesterday.getMinutes() - 40))
      },
      {
        id: 'review-5',
        flashcardId: 'card-5',
        sessionId: 'session-2',
        difficulty: 'medium',
        isCorrect: true,
        timeSpent: 7000,
        date: new Date(yesterday.setMinutes(yesterday.getMinutes() - 30))
      }
    ],
  },
  {
    id: 'session-3',
    deckId: 'deck-3',
    startTime: new Date(lastWeek.setHours(lastWeek.getHours() - 4)),
    endTime: new Date(lastWeek.setHours(lastWeek.getHours() - 3)),
    cardsReviewed: 2,
    correctAnswers: 2,
    reviews: [
      {
        id: 'review-6',
        flashcardId: 'card-6',
        sessionId: 'session-3',
        difficulty: 'easy',
        isCorrect: true,
        timeSpent: 4000,
        date: new Date(lastWeek.setMinutes(lastWeek.getMinutes() - 50))
      },
      {
        id: 'review-7',
        flashcardId: 'card-7',
        sessionId: 'session-3',
        difficulty: 'easy',
        isCorrect: true,
        timeSpent: 3000,
        date: new Date(lastWeek.setMinutes(lastWeek.getMinutes() - 45))
      }
    ],
  },
];

// Mock user
export const MOCK_USER: User = {
  id: 'user-1',
  name: 'John Doe',
  email: 'john.doe@example.com',
  decks: MOCK_DECKS,
  stats: {
    totalCards: 75,
    totalDecks: 4,
    cardsLearned: 45,
    reviewStreak: 7,
    lastReviewDate: yesterday,
    retentionRate: 85,
  },
};

// Community decks for marketplace
export const COMMUNITY_DECKS: Deck[] = [
  {
    id: 'community-deck-1',
    name: 'Medical Terminology',
    description: 'Essential medical terms for healthcare students',
    category: 'Medicine',
    cardsCount: 100,
    dueCardsCount: 0,
    isPublic: true,
    authorId: 'user-2',
    tags: ['medicine', 'healthcare', 'terminology'],
    rating: 4.9,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'community-deck-2',
    name: 'Data Structures & Algorithms',
    description: 'Core computer science concepts for interviews',
    category: 'Computer Science',
    cardsCount: 75,
    dueCardsCount: 0,
    isPublic: true,
    authorId: 'user-3',
    tags: ['programming', 'algorithms', 'data structures', 'interviews'],
    rating: 4.7,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
  {
    id: 'community-deck-3',
    name: 'IELTS Vocabulary',
    description: 'Essential vocabulary for IELTS exam preparation',
    category: 'Languages',
    cardsCount: 200,
    dueCardsCount: 0,
    isPublic: true,
    authorId: 'user-4',
    tags: ['english', 'ielts', 'exam', 'vocabulary'],
    rating: 4.8,
    createdAt: lastWeek,
    updatedAt: yesterday,
  },
]; 